"""
This template was autogenerated using an EvalDescriptor instance.
It is only a template and not a working reconstruction script.
"""

import numpy as np
import ptypy
from ptypy.core import Ptycho
from ptypy import utils as u

### Ptypy parameter tree ###

p = u.Param()


# Verbosity level
# Verbosity level for information logging.
# - ``0``: Only critical errors
# - ``1``: All errors
# - ``2``: Warning
# - ``3``: Process Information
# - ``4``: Object Information
# - ``5``: Debug
p.verbose_level = 1

# Reconstruction identifier
# Reconstruction run identifier. If ``None``, the run name will
# be constructed at run time from other information.
p.run = None

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.PtyScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.PtyScan.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.PtyScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.PtyScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.PtyScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.PtydScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.PtydScan.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.PtydScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.PtydScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.PtydScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.MoonFlowerScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.MoonFlowerScan.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.MoonFlowerScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.MoonFlowerScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.MoonFlowerScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.I13ScanFFP.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.I13ScanFFP.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.I13ScanFFP.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.I13ScanFFP.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.I13ScanFFP.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.I13ScanNFP.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.I13ScanNFP.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.I13ScanNFP.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.I13ScanNFP.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.I13ScanNFP.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.DlsScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.DlsScan.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.DlsScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.DlsScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.DlsScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.I08Scan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.I08Scan.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.I08Scan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.I08Scan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.I08Scan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.Savu.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.Savu.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.Savu.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.Savu.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.Savu.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.ID16AScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.ID16AScan.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.ID16AScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.ID16AScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.ID16AScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.AMOScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.AMOScan.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.AMOScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.AMOScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.AMOScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.DiProIFERMIScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.DiProIFERMIScan.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.DiProIFERMIScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.DiProIFERMIScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.DiProIFERMIScan.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.FliSpecScanMultexp.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.FliSpecScanMultexp.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.FliSpecScanMultexp.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.FliSpecScanMultexp.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.FliSpecScanMultexp.energy = None

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.UCLLaserScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.UCLLaserScan.auto_center = False

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.UCLLaserScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.UCLLaserScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.UCLLaserScan.energy = None

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.NanomaxStepscanNov2016.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.NanomaxStepscanNov2016.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.NanomaxStepscanNov2016.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.NanomaxStepscanNov2016.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.NanomaxStepscanNov2016.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.NanomaxStepscanMay2017.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.NanomaxStepscanMay2017.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.NanomaxStepscanMay2017.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.NanomaxStepscanMay2017.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.NanomaxStepscanMay2017.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.NanomaxFlyscanJune2017.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.NanomaxFlyscanJune2017.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.NanomaxFlyscanJune2017.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.NanomaxFlyscanJune2017.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.NanomaxFlyscanJune2017.energy = 7.2

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.ALS5321Scan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.ALS5321Scan.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.ALS5321Scan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.ALS5321Scan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.ALS5321Scan.energy = 0.82

# Aperture width or diameter
# May also be a tuple *(vertical,horizontal)* in case of an asymmetric aperture
p.scandata.SimScan.illumination.aperture.size = None

# Type of illumination model
# One of:
# - ``None`` : model initialitziation defaults to flat array filled with the specified number of photons
# - ``'recon'`` : load model from previous reconstruction, see `recon` Parameters
# - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
# - *<resource>* : one of ptypys internal image resource strings
# - *<template>* : one of the templates inillumination module
# In script, you may pass a numpy.ndarray here directly as the model. It is considered as incoming wavefront and will be propagated according to `propagation` with an optional `aperture` applied before.
p.scandata.SimScan.illumination.model = None

# Propagation distance from aperture to focus
# If ``None`` or ``0`` : No focus propagation
p.scandata.SimScan.illumination.propagation.focussed = None

# Parallel propagation distance
# If ``None`` or ``0`` : No parallel propagation
p.scandata.SimScan.illumination.propagation.parallel = None

# Path to a ``.ptyr`` compatible file
# 
p.scandata.SimScan.illumination.recon.rfile = '\*.ptyr'

# Type of initial object model
# One of:
# - ``None`` : model initialitziation defaults to flat array filled `fill`
# - ``'recon'`` : load model from STXM analysis of diffraction data
# - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
# - *<resource>* : one of ptypys internal model resource strings
# - *<template>* : one of the templates in sample module
# In script, you may pass a numpy.array here directly as the model. This array will be
# processed according to `process` in order to *simulate* a sample from e.g. a thickness
# profile.
p.scandata.SimScan.sample.model = None

# Default fill value
# 
p.scandata.SimScan.sample.fill = 1

# Parameters to load from previous reconstruction
# 
p.scandata.SimScan.sample.recon = u.Param()

# Path to a ``.ptyr`` compatible file
# 
p.scandata.SimScan.sample.recon.rfile = '\*.ptyr'

# Model processing parameters
# Can be ``None``, i.e. no processing
p.scandata.SimScan.sample.process = u.Param()

# Probe mode(s) diversity parameters
# Can be ``None`` i.e. no diversity
p.scandata.SimScan.sample.diversity = u.Param()

# Prepared data file path
# If source was ``None`` or ``'file'``, data will be loaded from this file and processing as
# well as saving is deactivated. If source is the name of an experiment recipe or path to a
# file, data will be saved to this file
p.scandata.SimScan.dfile = None

# Determine if center in data is calculated automatically
# - ``False``, no automatic centering
# - ``None``, only if :py:data:`center` is ``None``
# - ``True``, it will be enforced
p.scandata.SimScan.auto_center = None

# Detector pixel size
# Dimensions of the detector pixels (in meters)
p.scandata.SimScan.psize = 0.000172

# Sample to detector distance
# In meters.
p.scandata.SimScan.distance = 7.19

# Photon energy of the incident radiation in keV
# 
p.scandata.SimScan.energy = 7.2

# Aperture width or diameter
# May also be a tuple *(vertical,horizontal)* in case of an asymmetric aperture
p.scan.Full.illumination.aperture.size = None

# Type of illumination model
# One of:
# - ``None`` : model initialitziation defaults to flat array filled with the specified number of photons
# - ``'recon'`` : load model from previous reconstruction, see `recon` Parameters
# - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
# - *<resource>* : one of ptypys internal image resource strings
# - *<template>* : one of the templates inillumination module
# In script, you may pass a numpy.ndarray here directly as the model. It is considered as incoming wavefront and will be propagated according to `propagation` with an optional `aperture` applied before.
p.scan.Full.illumination.model = None

# Propagation distance from aperture to focus
# If ``None`` or ``0`` : No focus propagation
p.scan.Full.illumination.propagation.focussed = None

# Parallel propagation distance
# If ``None`` or ``0`` : No parallel propagation
p.scan.Full.illumination.propagation.parallel = None

# Path to a ``.ptyr`` compatible file
# 
p.scan.Full.illumination.recon.rfile = '\*.ptyr'

# Type of initial object model
# One of:
# - ``None`` : model initialitziation defaults to flat array filled `fill`
# - ``'recon'`` : load model from STXM analysis of diffraction data
# - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
# - *<resource>* : one of ptypys internal model resource strings
# - *<template>* : one of the templates in sample module
# In script, you may pass a numpy.array here directly as the model. This array will be
# processed according to `process` in order to *simulate* a sample from e.g. a thickness
# profile.
p.scan.Full.sample.model = None

# Default fill value
# 
p.scan.Full.sample.fill = 1

# Parameters to load from previous reconstruction
# 
p.scan.Full.sample.recon = u.Param()

# Path to a ``.ptyr`` compatible file
# 
p.scan.Full.sample.recon.rfile = '\*.ptyr'

# Model processing parameters
# Can be ``None``, i.e. no processing
p.scan.Full.sample.process = u.Param()

# Probe mode(s) diversity parameters
# Can be ``None`` i.e. no diversity
p.scan.Full.sample.diversity = u.Param()

# Coherence parameters
# 
p.scan.Full.coherence = u.Param()

# Number of probe modes
# 
p.scan.Full.coherence.num_probe_modes = 1

# Number of object modes
# 
p.scan.Full.coherence.num_object_modes = 1


### Reconstruction ###
if __name__ == "__main__":
    Ptycho(p,level=5)
