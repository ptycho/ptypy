#include <pyopencl-complex.h>

// filter shape
#define KERNEL_SHAPE_X %(kernel_sh_x)d
#define KERNEL_SHAPE_Y %(kernel_sh_y)d

// Define usable names for buffer access

#define obj_dlayer(k) addr[k*15 + 3]
#define pr_dlayer(k) addr[k*15]
#define ex_dlayer(k) addr[k*15 + 6]

#define obj_roi_row(k) addr[k*15 + 4]
#define obj_roi_column(k) addr[k*15 + 5]

#define obj_sh_row info[3]
#define obj_sh_column info[4]

#define pr_sh info[5]

#define N_pods info[0]*info[1]

#define nmodes info[1]

__kernel void calc_fm(float pbound,
                    __global float *fm,
                    __global float *fmask,
                    __global float *fmag,
                    __global float *fdev,
                    __global float *ferr)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z_merged = get_global_id(0);
    size_t lx = get_local_id(2);
    size_t idx = z_merged*dx*dx + y*dx + x;

    __private float a[3];
    
    float error = ferr[z_merged];
    float renorm = sqrt(pbound/error);
    const float eps = 1e-10;
    
    if (renorm < 1.){
        a[0] = fmask[idx]; 
        a[1] = 1. - a[0];
        a[2] = fdev[idx] * renorm + fmag[idx];
        a[2] /= fdev[idx] + fmag[idx] + eps;
        fm[idx] = a[0] * a[2] + a[1];
    }
    else {
        fm[idx] = 1.0;
    }            
}
__kernel void fmag_update(int nmodes,
                    __global cfloat_t *f,
                    __global float *fm
                    //__global cfloat_t *pre_ifft_g,
                    )
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    size_t z_merged = z/nmodes;
    
    float fac = fm[z_merged*dx*dx + y*dx + x];
    //cfloat_t ft = cfloat_mul(f[z*dx*dx + y*dx + x], pre_ifft_g[y*dx + x]);
    f[z*dx*dx + y*dx + x] = cfloat_mulr(f[z*dx*dx + y*dx + x] , fac);
    
}
               
__kernel void build_aux(__global int *info,
                    __global float *DM_info,
                    __global cfloat_t *ob_g,
                    __global cfloat_t *pr_g,
                    __global cfloat_t *ex_g,
                    __global cfloat_t *f_g,     // calculate: (1+alpha)*pod.probe*pod.object - alpha* pod.exit
                    //__global float *af2,
                    __global cfloat_t *pre_fft_g,
                    __global int *addr)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    //__private cfloat_t loc_sub [4];
    //__private cfloat_t loc_res [1];
    __private float alpha = DM_info[0];
    
    //loc_sub[0] = cfloat_fromreal(DM_info[0]);
    cfloat_t ex0 = cfloat_rmul(alpha,ex_g[ex_dlayer(z)*dx*dx + y*dx + x]);
    cfloat_t ex1 = cfloat_mul(ob_g[obj_dlayer(z)*obj_sh_row*obj_sh_column + (y+obj_roi_row(z))*obj_sh_column + obj_roi_column(z)+x],pr_g[pr_dlayer(z)*dx*dx + y*dx+x]);
    //loc_sub[3] = cfloat_fromreal(1. + loc_sub[0].real);
    
    cfloat_t ex2 = cfloat_sub(cfloat_rmul(1.+alpha,ex1),ex0);
    f_g[z*dx*dx + y*dx + x] = cfloat_mul(ex2,pre_fft_g[y*dx+x]);
    //af2[(z/nmodes)*dx*dx + y*dx + x] = 0;          //maybe better with if z < af2_size
    
}


__kernel void post_fft(__global int *info,
                    __global cfloat_t *f_g,
                    __global float *af2,
                    __global cfloat_t *post_fft_g)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    size_t z_z = z*nmodes;
    __private float loc_f[2];
    loc_f[1] = 0;
    
    
    for(int i=0; i<nmodes; i++){
        f_g[(z_z+i)*dx*dx + y*dx + x] = cfloat_mul(f_g[(z_z+i)*dx*dx + y*dx + x], post_fft_g[y*dx + x]);
        loc_f[0] = cfloat_abs(f_g[(z_z+i)*dx*dx + y*dx + x]);
        loc_f[1] += loc_f[0]*loc_f[0];
    }
    af2[z*dx*dx + y*dx + x] = loc_f[1];
    
}

__kernel void dev(__global cfloat_t *f_g,
                    __global float *af,
                    __global float *af2,
                    __global float *fmag,
                    __global float *fdev,             // fdev = af - fmag 
                    __global float *I,
                    __global float *err_fmag_t,    // fmask*fdev**2  
                    __global float *mask_g,
                    __global float *mask_sum_g,
                    __global float *err_ph_temp)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z_merged = get_global_id(0);
    __private float loc_err_phot[5];
    __private float loc_f [3];
    
    loc_f[1] = af2[z_merged*dx*dx + y*dx + x];
    af[z_merged*dx*dx + y*dx + x] = sqrt(loc_f[1]);
    loc_f[2] = af[z_merged*dx*dx + y*dx + x] - fmag[z_merged*dx*dx + y*dx + x];
    fdev[z_merged*dx*dx + y*dx + x] = loc_f[2];
    
    loc_err_phot[0] = mask_g[z_merged*dx*dx + y*dx + x];
    loc_err_phot[1] = loc_f[1] - I[z_merged*dx*dx + y*dx + x];     // af2 - I
    loc_err_phot[2] = loc_err_phot[1]*loc_err_phot[1];                     // (af2 - I)**2
    loc_err_phot[3] = loc_err_phot[2] / (I[z_merged*dx*dx + y*dx + x]+1.);
    loc_err_phot[4] = loc_err_phot[3] / mask_sum_g[z_merged];
    
    err_ph_temp[z_merged*dx*dx + y*dx + x] = loc_err_phot[4];

    err_fmag_t[z_merged*dx*dx + y*dx + x] = loc_err_phot[0] * loc_f[2] * loc_f[2] / mask_sum_g[z_merged];
}
__kernel void dev_post_fft(__global int *info,
                           __global cfloat_t *f_g,
                           __global cfloat_t *post_fft_g,
                           __global float *fmag,
                           __global float *fdev,             // fdev = af - fmag 
                           __global float *err_fmag,    // fmask*fdev**2  
                           __global float *mask_g,
                           __global float *mask_sum_g)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z_merged = get_global_id(0);
    size_t z_z = z_merged*nmodes;

    __private float loc_f [3];
    __private float loc_af2 [2];
    
    // saves model intensity 
    loc_af2[1] = 0;
    
    for(int i=0; i<nmodes; i++){
        f_g[(z_z+i)*dx*dx + y*dx + x] = cfloat_mul(f_g[(z_z+i)*dx*dx + y*dx + x], post_fft_g[y*dx + x]);
        loc_af2[0] = cfloat_abs(f_g[(z_z+i)*dx*dx + y*dx + x]);
        loc_af2[1] += loc_af2[0]*loc_af2[0];
    }
    
    loc_f[2] = sqrt(loc_af2[1]) - fmag[z_merged*dx*dx + y*dx + x];
    fdev[z_merged*dx*dx + y*dx + x] = loc_f[2];

    err_fmag[z_merged*dx*dx + y*dx + x] = mask_g[z_merged*dx*dx + y*dx + x] * loc_f[2] * loc_f[2] / mask_sum_g[z_merged];
}
__kernel void calc_fm(__global float *DM_info,
                    __global float *fm,
                    __global float *mask,
                    __global float *fmag,
                    __global float *fdev,
                    //__global float *af,
                    __global float *err_fmag)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z_merged = get_global_id(0);
    size_t lx = get_local_id(2);
    size_t idx = z_merged*dx*dx + y*dx + x;

    __private float a[3];
    
    float pbound = fabs(DM_info[1]);
    float error = err_fmag[z_merged];
    float renorm = sqrt(pbound/error);
    const float eps = 1e-10;
    
    //pbound = fabs(DM_info[1]);
    if (renorm < 1.){
        a[0] = mask[idx]; 
        a[1] = 1. - a[0];
        a[2] = fdev[idx] * renorm + fmag[idx];
        //fm_temp[2] += fmag[z_merged*dx*dx + y*dx + x];
        //fm_temp[3] = af[z_merged*dx*dx + y*dx + x] + pow(10.,-10);
        a[2] /= fdev[idx] + fmag[idx] + eps;
        //fm_temp[2] /= fm_temp[3];
        fm[idx] = a[0] * a[2] + a[1];
    }
    else {
        fm[idx] = 1.0;
    }
    //fm[idx] = mask_g[idx]*fm_t + 1.-mask_g[idx];
    
}
__kernel void fmag_update(__global int *info,
                    __global cfloat_t *f,
                    __global float *fm,
                    __global cfloat_t *pre_ifft_g)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    size_t z_merged = z/nmodes;
    
    float fac = fm[z_merged*dx*dx + y*dx + x];
    cfloat_t ft = cfloat_mul(f[z*dx*dx + y*dx + x], pre_ifft_g[y*dx + x]);
    f[z*dx*dx + y*dx + x] = cfloat_mulr(ft , fac);
    
}
__kernel void fmag_update2(__global int *info,
                    __global cfloat_t *f,
                    __global float *fm,
                    __global cfloat_t *pre_ifft_g)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    size_t zi = z*nmodes;
    
    float fac = fm[z*dx*dx + y*dx + x];
    for (int i=0;i<nmodes;i++){
        cfloat_t ft = cfloat_mul(f[(zi+i)*dx*dx + y*dx + x], pre_ifft_g[y*dx + x]);
        f[(zi+i)*dx*dx + y*dx + x] = cfloat_mulr(ft , fac);
    }
}
__kernel void fmag_all_update(__global int *info,
                            __global float *DM_info,
                            __global cfloat_t *f,
                            __global cfloat_t *pre_ifft_g,
                            __global float *mask_g,
                            __global float *fmag,
                            __global float *fdev,
                            __global float *err_fmag)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    size_t z_merged = z/nmodes;
    size_t midx = z_merged*dx*dx + y*dx + x;
    size_t idx = z*dx*dx + y*dx + x;
    
    __private float pbound = fabs(DM_info[1]);
    __private float renorm = sqrt(pbound/err_fmag[z_merged]);
    __private float eps = 1e-10;//pow(10.,-10);
    
    __private float m=mask_g[midx];
    __private float g=fmag[midx];
    __private float d=fdev[midx];
                
    float fm =  m * native_divide(d*renorm +g, d+g+eps) + (1-m);
    
    cfloat_t ft = cfloat_mul(f[idx], pre_ifft_g[y*dx + x]);
    f[idx] = cfloat_mulr(ft , fm );
    
    /*
    fm_temp[0] = mask_g[idx];
    fm_temp[1] = 1. - fm_temp[0];
    fm_temp[2] = fdev[idx] * renorm + fmag[idx];
    fm_temp[2] /= fdev[idx] + fmag[idx] + eps;
    fm_temp[3] = fm_temp[0]*fm_temp[2] + fm_temp[1];
    
    ft = cfloat_mul(f[z*dx*dx + y*dx + x], pre_ifft_g[y*dx + x]);
    f[z*dx*dx + y*dx + x] = cfloat_mulr(ft , fm_temp[3] );
    */
}

__kernel void post_ifft(__global int *info,
                    __global cfloat_t *ob_g,
                    __global cfloat_t *pr_g,
                    __global cfloat_t *ex_g,
                    __global cfloat_t *f,
                    __global cfloat_t *post_ifft_g,
                    __global int *addr)
{
    size_t x = get_global_id(2);
    size_t dx = get_global_size(2);
    size_t y = get_global_id(1);
    size_t z = get_global_id(0);
    __private cfloat_t ex_df[3];
    
    ex_df[0] = cfloat_mul(f[z*dx*dx + y*dx + x],post_ifft_g[y*dx + x]);
    ex_df[1] = cfloat_mul(ob_g[obj_dlayer(z)*obj_sh_row*obj_sh_column + (y+obj_roi_row(z))*obj_sh_column + obj_roi_column(z)+x],pr_g[pr_dlayer(z)*dx*dx + y*dx+x]);
    ex_df[2] = cfloat_sub(ex_df[0] , ex_df[1]); 
    f[z*dx*dx + y*dx + x] = ex_df[2] ; // t.b. removed later
    ex_g[ex_dlayer(z)*dx*dx + y*dx + x] = cfloat_add(ex_g[ex_dlayer(z)*dx*dx + y*dx + x] , ex_df[2]);

}

__kernel void new_obj_update(__global int *info,
                        __global cfloat_t *ob_g,
                        __global cfloat_t *pr_g,
                        __global cfloat_t *obn_g,
                        __global cfloat_t *ex_g,
                        __global int *addr)
{
    size_t z = get_global_id(0);
    size_t dz = get_global_size(1);
    size_t y = get_global_id(1);
    __private cfloat_t ob[8];
    __private cfloat_t obn[8];

    int v1 = 0;
    int v2 = 0;
    size_t x = y*dz + z;
    cfloat_t pr = pr_g[0];
    
    for (int i=0;i<1;i++){
        ob[i] = ob_g[i*dz*dz + y*dz + z];
        obn[i] = obn_g[i*dz*dz + y*dz + z];
    }
    
    for (int i=0;i<N_pods;i++){
        v1 = (int)y - obj_roi_row(i);
        v2 = (int)z - obj_roi_column(i);
        if ((v1>=0)&&(v1<pr_sh)&&(v2>=0)&&(v2<pr_sh)){ 
            pr = pr_g[pr_dlayer(i)*pr_sh*pr_sh + v1*pr_sh + v2];
            ob[obj_dlayer(i)] = cfloat_add(ob[obj_dlayer(i)],cfloat_mul(cfloat_conj(pr),ex_g[ex_dlayer(i)*pr_sh*pr_sh +v1*pr_sh + v2]));
            obn[obj_dlayer(i)] = cfloat_add(obn[obj_dlayer(i)],cfloat_mul(pr,cfloat_conj(pr)));
        }
    
    }
    for (int i=0;i<1;i++){
        ob_g[i*dz*dz + y*dz + z] = ob[i];
        obn_g[i*dz*dz + y*dz + z] = obn[i];
    }
}
__kernel void new_pr_update(__global int *info,
                        __global cfloat_t *ob_g,
                        __global cfloat_t *pr_g,
                        __global cfloat_t *prn_g,
                        __global cfloat_t *ex_g,
                        __global int *addr)
{
    size_t z = get_global_id(0);
    size_t dz = get_global_size(1);
    size_t y = get_global_id(1);
    //size_t dy = get_global_size(1);
    //int off1 = 0;
    //int off2 = 0;
    __private cfloat_t pr[8];
    __private cfloat_t prn[8];
    
    int v1 = 0;
    int v2 = 0;
    cfloat_t ob; 
    
    for (int i=0;i<nmodes;i++){
        pr[i] = pr_g[i*dz*dz + y*dz + z];
        prn[i] = prn_g[i*dz*dz + y*dz + z];
    }

    for (int i=0;i<N_pods;i++){
        v1 = (int)y + obj_roi_row(i);
        v2 = (int)z + obj_roi_column(i);
        if ((v1>=0)&&(v1<obj_sh_row)&&(v2>=0)&&(v2<obj_sh_column)){ 
            ob = ob_g[obj_dlayer(i)*obj_sh_row*obj_sh_column + v1*obj_sh_column + v2];
            pr[pr_dlayer(i)] = cfloat_add(pr[pr_dlayer(i)], cfloat_mul(cfloat_conj(ob),ex_g[ex_dlayer(i)*pr_sh*pr_sh +y*pr_sh + z]));
            prn[pr_dlayer(i)] = cfloat_add(prn[pr_dlayer(i)],cfloat_mul(ob,cfloat_conj( ob )));
        }
    
    }

    for (int i=0;i<nmodes;i++){
        pr_g[i*dz*dz + y*dz + z] = pr[i];
        prn_g[i*dz*dz + y*dz + z] = prn[i];
    }

}


__kernel void sum(__global float *err_fmag_t, __global float *err_fmag, __global float *err_ph_t, __global float *err_ph)
{
    size_t z = get_global_id(0);
    size_t dx = 256;
    int x;
    int y; 
    for (y=0; y<256; y++){
        for (x=0; x<256; x++){
            err_fmag[z] += err_fmag_t[z*dx*dx + y*dx + x];
            err_ph[z] += err_ph_t[z*dx*dx + y*dx + x];
        }
    }
}

__kernel void reduce_one_step(__global const int* info,
            __global const float* buffer,
            __global float* result) {
            
    __local float scratch[256];
    
    size_t z = get_global_id(0);
    size_t y = get_global_id(1);

    size_t ldz = get_local_size(0);
    
    size_t ly = get_local_id(1);
    size_t ldy = get_local_size(1);
    
    
    float accumulator = 0;
    size_t jump = z*pr_sh*pr_sh + y;
    size_t next = (z+1)*pr_sh*pr_sh + y;
    
    
    while (jump < next) {
        accumulator += buffer[jump];
        jump += ldy;
    }
       
    scratch[ly] = accumulator;
    
    barrier(CLK_LOCAL_MEM_FENCE);
    
    for(int offset = ldy / 2;
            offset > 0;
            offset = offset / 2) 
        {
        
            if (ly < offset) {
              scratch[ly] += scratch[ly + offset];
            }
        
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    
    if (ly == 0) {
        result[z] = scratch[0];
    }
}

__kernel void sum2(__global int *info, __global float *buffer, __global float *result)
{
    size_t z = get_global_id(0);
    size_t dz = get_global_size(0);
    size_t lz = get_local_id(0);
    
    for (int y=0; y<pr_sh/16; y++){
        for (int x=0; x<pr_sh/16; x++){
            result[z] += buffer[z*pr_sh*pr_sh + y*pr_sh + x]; 
        }
    }      
}
__kernel void reduce(__global int *info,
            __global float* buffer,
            __global float* result) {
            
    __local float loc_sum[256];
    size_t z = get_global_id(0);
    size_t y = get_global_id(1);

    
    size_t dz = get_global_size(0);
    size_t dy = get_global_size(1);

    
    size_t lz = get_local_id(0);
    size_t ldz = get_local_size(0);
    
    size_t ly = get_local_id(1);
    size_t ldy = get_local_size(1);
    
    
    size_t gidz = get_group_id(0);
    size_t gidy = get_group_id(1);
    
    int groups = dy/ldy;
    size_t lidx = lz*ldz +ly;
    
    for(int i=0; i<info[0]; i++){
        size_t idx = i*dz*dz + z*dz + y;
        size_t gid = gidz*groups + gidy;
        
        loc_sum[lidx] = buffer[idx];
        buffer[idx] = 0;
        for (int stride=ldy*ldz/2; stride>0; stride/=2){
            barrier(CLK_LOCAL_MEM_FENCE);
            if(lidx < stride){
                loc_sum[lidx] += loc_sum[lidx + stride];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (lidx==0){
            result[i*dz*dz + gid] = loc_sum[0];
        }
    }

    

}

__kernel void gaussian_filter(__global cfloat_t *buffer, __global float *gauss_kernel){
    
    size_t x = get_global_id(0);
    size_t y = get_global_id(1);
    size_t dx = get_global_size(0);
    size_t dy = get_global_size(1);
    
    int ksx = KERNEL_SHAPE_X;
    int ksy = KERNEL_SHAPE_Y;
    __private cfloat_t sum;
    sum = cfloat_fromreal(0.0);
    cfloat_t img = buffer[x*dx + y];
    for(int kidx=0; kidx<ksx; kidx++){
        for(int kidy=0; kidy<ksy; kidy++){
            if(x-kidx+(ksx-1)/2>=0 && y-kidy+(ksy-1)/2>=0 && x-kidx+(ksx-1)/2<dx && y-kidy+(ksy-1)/2<dy){
                sum = cfloat_add(sum,cfloat_mulr(buffer[(x-kidx+(ksx-1)/2)*dx+(y-kidy+(ksy-1)/2)] , gauss_kernel[kidx*ksy + kidy]));
                }
        }
    }
    buffer[x*dx + y] = sum;
}
