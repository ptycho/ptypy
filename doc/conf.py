# -*- coding: utf-8 -*-
#
# ptypy documentation build configuration file, created by
# sphinx-quickstart on Sat Apr  4 18:00:44 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# generate paramters.rst and other rst
import subprocess
subprocess.check_call(['python', 'script2rst.py'])  # We need this to have a clean sys.argv
subprocess.check_call(['python', 'parameters2rst.py'])
subprocess.check_call(['python', 'tmp2rst.py'])
exec(open('version.py').read())

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = '1.3'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.mathjax',
    'sphinx.ext.napoleon',
]


def truncate_docstring(app, what, name, obj, options, lines):
    """
    Remove the Default parameter entries.
    """
    if not hasattr(obj, 'DEFAULT'):
        return
    if any(l.strip().startswith('Defaults:') for l in lines):
        while True:
            if lines.pop(-1).strip().startswith('Defaults:'):
                break


def remove_mod_docstring(app, what, name, obj, options, lines):
    from ptypy import utils as u
    from ptypy import defaults_tree
    u.verbose.report.headernewline='\n\n'
    searchstr = ':py:data:'
    
    def get_refs(dct, pd, depth=2, indent=''):
        if depth < 0:
            return
        
        for k, value in dct.items():
            ref = ', see :py:data:`~%s`' % pd.children[k].entry_point if k in pd.children else ''
            if hasattr(value, 'items'):
                v = str(value.__class__.__name__)
            elif str(value) == value:
                v = '"%s"' % value
            else:
                v = str(value)
                
            lines.append(indent + '* *' + k + '* = ``' + v + '``' + ref)
            
            if hasattr(value, 'items'):
                lines.append("")
                get_refs(value, pd.children[k], depth=depth-1, indent=indent+'  ')
                lines.append("")

    if isinstance(obj, u.Param) or isinstance(obj, dict):
        pd = None
        
        for l in lines:
            start = l.find(searchstr)
            if start > -1:
                newstr = l[start:]
                newstr = newstr.split('`')[1]
                newstr = newstr.replace('~', '')
                pd = defaults_tree.get(newstr)
                break
                
        if pd is not None:
            get_refs(obj, pd, depth=2, indent='')

        
def setup(app):
    app.connect('autodoc-process-docstring', remove_mod_docstring)
    app.connect('autodoc-process-docstring', truncate_docstring)


napoleon_use_ivar = True
napoleon_include_special_with_doc = True

# make init show up in classes
autoclass_content = 'both'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'content'

# General information about the project.
project = u'ptypy'
copyright = u'2015, Pierre Thibault, Bjoern Enders and others'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = version #'0.0.1'
# The full version, including alpha/beta/rc tags.
release = short_version #'0.0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# Common abreviations
rst_epilog = """
.. |ptypy| replace:: PtyPy
.. _ptypy: http://www.github.com/ptycho/ptypy/
"""

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------
numfig = True

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'ptypysphinx'#'sphinxdoc'#'classic'#'scrolls' #'sphinxdoc' #'alabaster' 

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {'sidebarwidth':'280'}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['html_templates']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = 'html_templates/ptypysphinx/static/logo_100px.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = 'html_templates/ptypysphinx/static/ptypyicon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
   '**': ['globaltoc.html','relations.html','sourcelink.html', 'searchbox.html'],
   'index': ['download.html'],
}

# Additional templates that should be rendered to pages, maps page names to
# template names.
html_additional_pages = {'start':'startpage.html'}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'ptypydoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
'papersize': 'a4paper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('content', 'content.tex', u'ptypy Documentation',
   u'Pierre Thibault, Bjoern Enders and others', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
latex_logo = '../resources/ptypy_logo_1M.png'

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True



# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'ptypy', u'ptypy Documentation',
     [u'Pierre Thibault, Bjoern Enders and others'], 1)
]

# If true, show URL addresses after external links.
man_show_urls = True


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'ptypy', u'ptypy Documentation',
   u'Pierre Thibault, Bjoern Enders and others', 'ptypy', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False
