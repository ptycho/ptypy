.. _getting_started:

**************************
Getting started with Ptypy
**************************

.. _installation:

Installation
============

General installation instructions
---------------------------------

Being a python package, |ptypy|_ depends on a number of other
packages which are listed below.
Once its dependecies are met, ptypy should work *out-of-the-box*.

.. note:: 
   |ptypy| is developed for Python 2.7.x and is currently incompatible
   with Python 3.x. Python 3 support is planned in future releases.
          

Essential packages
^^^^^^^^^^^^^^^^^^

* `NumPy <https://pypi.python.org/pypi/numpy/1.9.2>`_ 
  (homepage: `<http://www.numpy.org>`_)
* `SciPy <https://pypi.python.org/pypi/scipy/0.15.1>`_ 
  (homepage: `<http://www.scipy.org>`_)
* `h5py <https://pypi.python.org/pypi/scipy/2.5.0>`_ 
  (homepage: `<http://www.h5py.org>`_)

Recommended packages for additional functionality
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Please note that |ptypy| is an alpha release and lacks rigorous import 
checking. There may be parts of code that implicitly ask for any of the
packages listed here. Therefore, we recommend to install these packages.

* `Matplotlib <https://pypi.python.org/pypi/matplotlib/1.4.3>`_ 
  for any kind of plotting or image generation
  (homepage: `<http://www.matplotlib.org>`_) and python bindings for
  `QT4 <https://pypi.python.org/pypi/PyQt4/4.11.3>`_

* `mpi4py <https://pypi.python.org/pypi/mpi4py/1.3.1>`_ 
  for CPU-node parallelisation,  contains python bindings for the
  `Message Passaging Interface <http://www.mcs.anl.gov/research/projects/mpi/>`_, 
  (homepage: `<https://bitbucket.org/mpi4py/mpi4py/>`_)

* `pyzmq <https://pypi.python.org/pypi/pyzmq/14.6.0>`_ 
  for a threaded server on the main node to perfrom asynchronous 
  client-server communication, contains python bindings for the
  ZeroMQ protocol, 
  (homepage: `<http://github.com/zeromq/pyzmq>`_).
  This package is needed for non-blocking plots of the reconstruction run
  (e.g. for :ref:`plotclient`).

Optional packages
^^^^^^^^^^^^^^^^^
Other very useful packages are

* `Ipython <https://pypi.python.org/pypi/ipython/3.1.0>`_ 
  (homepage: `<http://www.ipython.org>`_)

Installation on Debian/Ubuntu
-----------------------------
|ptypy| is developed on the current LTS version of Ubuntu which is the
recommended operating system for |ptypy|

Prerequisites
^^^^^^^^^^^^^
Many of the required python packages are
available in the repositories. Just type (with sudo rights)
::

    $ sudo apt-get install python-numpy python-scipy python-h5py\
    $ python-matplotlib python-mpi4py python-pyzmq

Get ptypy
^^^^^^^^^
Download and unpack |ptypy|_ from the sources::

    $ wget https://github.com/ptycho/ptypy/archive/master.zip
    $ unzip master.zip -d /tmp/; rm master.zip

or make a clone of the |ptypy|_ github repository::
  
    $ git clone https://github.com/ptycho/ptypy.git /tmp/ptypy-master

CD into the download directory (e.g. /tmp/ptypy-master) and install |ptypy| with 
::

    $ python setup.py install --user 

The local ``--user`` install is recommended instead of a system-wide
``sudo`` install. It makes it easier to quickly apply fixes yourself.
However, for an all-user system-wide install, type
::

    $ sudo python setup.py install 

Installation on Windows
-----------------------

These installation instructions were contributed by M. Stockmar and tested
with *Windows 8.1 Enterprise (64 bit)* on a core i7 Thinkpad w520 
in February 2015. 
No python was installed before on that machine. 

.. note::
   There might be also simpler ways to get a full scientific python 
   suite for 32 bit Windows. Please let us know if you managed to get
   |ptypy|_ running on a system not listed here.

Prerequisites
^^^^^^^^^^^^^

* Download and install python 2.7.x from `<http://www.python.org>`_ 
  (Make sure you have the 64 bit version)
  Click *yes* when asked to add python to the path environment variable.

* Go to the command line and install wheel::
  
  $ pip install wheel

* Install Microsoft's implementation for MPI to use multiple CPUs from
  `<https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx>`_
  Other MPI implementations may work as well but were not tested.

* Install the QT-Framework if you don't have it already.
  `<http://qt-project.org/>`_


Download all other binaries
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The binaries will be downloaded from a `website <http://www.lfd.uci.edu/~gohlke/pythonlibs/>`_ 
which offers various builds for different python versions for Windows (both 32 and 64 bit) in
the form of a `python wheel <https://pypi.python.org/pypi/wheel>`_.
Make sure you choose the correct version for your windows and system. 

Numpy and some other builds are linked against the 
Intel Math Kernel Library (MKL) which is supposed to be fast.

* First make sure you have the Microsoft Visual C++ 2010 redistributable package (maybe also the 2008 version).
  
  * | 2010 (64 bit, for 32 bit version check the website):
    | `<http://www.microsoft.com/en-us/download/details.aspx?id=14632>`_ 
  * | 2008 (64 bit, for 32 bit check the website):
    | `<http://www.microsoft.com/en-us/download/details.aspx?id=15336>`_

* Now, go to to `<http://www.lfd.uci.edu/~gohlke/pythonlibs/>`_
  and download the latest pip binaries and update pip::
  
    $ python.exe pip-6.0.8-py2.py3-none-any.whl/pip install pip-6.0.8-py2.py3-none-any.whl.
  
  (The file name might change slightly if a newer version of pip is available)

* Then download all the other binaries as whl-files.
  A whl-file can be installed via command line according to::
  
    $ pip install filename.whl
  
  Download and install the binaries in the following order:

  #. ``numpy``
  #. ``pillow`` (replacement for PIL)
  #. ``matplotlib``
  #. ``ipython``
  #. ``h5py``
  #. ``scipy`` (may install additional packages as well)
  #. ``mpi4py`` (choose the one for MS MPI if you have installed MS MPI)
  #. ``pyzmq``
  #. ``pyqt4`` (QT framework was installed before on the testing machine)
  #. ``pyside`` 

..
   pip install pyqt4  (QT framework was installed before on the testing machine)
   pip install pyside

   In case these instructions are not sufficient, refer to the website by C. Gohlke.

Get ptypy
^^^^^^^^^
Download |ptypy| from `<https://github.com/ptycho/ptypy/archive/master.zip>`_
and unzip to any directory, for example ``C:\Temp``. 
Change into that directly and install from commandline::

  $ cd C:\Temp\ptypy-master
  $ python setup.py install


.. _quickstart:

Quickstart with a minimal script
================================

!!include!! _script2rst/minimal_script.tut


.. _morescripts:

Utilies/Binaries for convenience
================================

|ptypy| provides a few utility scripts to make life easier for you, 
the user. They are located in ``[ptypy_root]/scripts``. 
In case of a user install on 
Ubuntu Linux, they are copied to ``~/.local/bin``

.. note:: 
   Due to the early stage of developmnet, 
   these scripts may see substantial changes in further releases, i.e.
   the call signature may change.

Plotting from a reconstruction/dump file (\*.ptyr)
--------------------------------------------------

``ptypy.plot`` is an automatic plotting script that installs on Unix systems
It has the syntax
::

    $ ptypy.plot [-h] [-l LAYOUT] [-t IMFILE] ptyrfile

For our minimal example this translates to
::

    $ ptypy.plot /tmp/ptypy/recons/minimal/minimal_DM.ptyr -t minimal.png

and the image looks like this (:numref:`minimal_result`)

.. figure:: ../img/minimal_result.png
   :width: 90 %
   :figclass: highlights
   :name: minimal_result
   
   Example plot made with ``ptypy.plot`` using the *default* layput

Inspecting a hdf5 compatible file
---------------------------------

Sometimes we want to quickly inspect what is in a *hdf5* file
that was created by |ptypy|. For such cases, we can use ``ptypy.inspect``.
::

    $ ptypy.inspect [-h] [-p PATH] [--report] [-d DEPTH] h5file

For example, a quick view at the top level can be realized with
::

    $ ptypy.inspect /tmp/ptypy/recons/minimal/minimal_DM.ptyr -d 1

which has the following the output::

     * content [Param 4]:
         * obj [dict 1]:
         * pars [Param 9]:
         * probe [dict 1]:
         * runtime [Param 8]:
     * header [dict 2]:
         * description [string = "Ptypy .h5 compatible storage format"]
         * kind [string = "minimal"]

If we are interested solely in the probe we could use ::

    $ ptypy.inspect /tmp/ptypy/recons/minimal/minimal_DM.ptyr -d 1 -p content/probe

which has the following the output::

     * S00G00 [dict 13]:
         * DataTooSmall [scalar = False]
         * ID [string = "S00G00"]
         * _center [array = [64 64]]
         * _origin [array = [ -4.07172778e-06  -4.07172778e-06]]
         * _pool [Param 0]:
         * _psize [array = [  6.36207466e-08   6.36207466e-08]]
         * data [1x128x128 complex64 array]
         * fill_value [scalar = 0.0]
         * layermap [list = [0]]
         * model_initialized [scalar = True]
         * nlayers [scalar = 1]
         * padonly [scalar = False]
         * shape [tuple = (1, 128, 128)]

We omitted the result for the complete file to save some space but you
are encouraged to try::

    $ ptypy.inspect /tmp/ptypy/recons/minimal/minimal_DM.ptyr



Create a new template for a reconstruction script
-------------------------------------------------

In cases where we want to create a new reconstruction script from scratch, 
it may be cumbersome to write each and every parameter that we want to
change. But, with the help of ``ptypy.new``, we can create a python 
script which is prefilled with defaults::

    $ ptypy.new [-h] [-u ULEVEL] [--short-doc] [--long-doc] pyfile
    
In the folder ``[ptypy_root]/templates`` you find two scripts
that where auto-generated with the following calls::

    $ ptypy.new -u 0 --long-doc pars_few_alldoc.py
    $ ptypy.new -u 2  pars_all_nodoc.py

And here is a quick view of the first one with much documentation
(only the first 50 lines).

.. literalinclude:: ../../templates/pars_few_alldoc.py
   :language: python
   :linenos:
   :lines: 1-50

.. _plotclient:

Run a plotclient in a separate process
--------------------------------------

|ptypy| supports a Client/Server approach. That means that the
reconstruction process runs on a remote server (cluster) while we can 
monitor the progress on a local machine.

In this case, we need to start a plotting Client on a separate machine). 
You can implement your own plotting client but you may find it convenient
to use the plotting utility ``ptypy.plotclient``::
 
    $ ptypy.plotclient [-h] [-l LAYOUT] [--dump] [--movie] [-i INTERVAL] [-d DIRECTORY]
    
.. note::
   None of the options are currently implemented. The plotting client receives all
   information from the server it connects to. Work in progress ..
   
More script templates
=====================

Besides the script from which section :ref:`quickstart` was generated,
there is a trinity of similar scripts at your disposal that
you can temper with. 

All-in-one
----------
We encourage you to use the script ``[ptypy_root]/templates/minimal_prep_and_run.py``
and modify the *recipe* part of the data parameter branch.
Observe what changes in the reconstruction when scan parameters change.

.. literalinclude:: ../../templates/minimal_prep_and_run.py
   :language: python
   :linenos:
   :emphasize-lines: 31,33,35
   
Creating a .ptyd data-file
--------------------------

We encourage you to use this script ``[ptypy_root]/templates/make_sample_ptyd.py``
to create various different samples and see what happens if the data
processing parameters are changed. If you have become curious, move
forward to :ref:`ptypy_data` and take a look at |ptypy|'s data management.
Check out the data parameter branch :py:data:`.scan.data` for detailed parameter
descriptions.

.. literalinclude:: ../../templates/make_sample_ptyd.py
   :language: python
   :linenos:
   :emphasize-lines: 15-26
   
Loading a data file to run a reconstruction
-------------------------------------------

The script ``[ptypy_root]/templates/minimal_load_and_run.py``
should resembles the case of data analysis after the experiment has taken
place. Take a challenging sample data from before
and alter the reconstruction parameters and algorithms to find out if you
can make the recontruction converge. Check out the engine parameter
branch :py:data:`.engine` for detailed parameter descriptions.

.. literalinclude:: ../../templates/minimal_load_and_run.py
   :language: python
   :linenos:
   :emphasize-lines: 25-56
